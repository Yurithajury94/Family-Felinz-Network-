<!DOCTYPE html><html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Family Felinz Network — Watch Now</title>
  <meta name="description" content="Stream Family Felinz Network and see cast, crew, and ratings pulled from IMDb via the OMDb API." />
  <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin>
  <script src="https://cdn.jsdelivr.net/npm/hls.js@1.5.8/dist/hls.min.js" defer></script>
  <script src="https://cdn.tailwindcss.com" defer></script>
  <style>
    /* Optional: smooth fade-in */
    body { opacity: 0; transition: opacity .4s ease; }
    body.ready { opacity: 1; }
    /* Poster background mask */
    .poster-mask { background: linear-gradient(90deg, rgba(0,0,0,0.85) 0%, rgba(0,0,0,0.6) 40%, rgba(0,0,0,0.2) 100%); }
    .backdrop { filter: blur(12px) brightness(.65); transform: scale(1.06); }
  </style>
  <!-- OpenGraph / Twitter -->
  <meta property="og:type" content="video.movie" />
  <meta property="og:title" content="Family Felinz Network — Watch Now" />
  <meta property="og:description" content="Adult animated comedy-drama. Stream it here and see details from IMDb." />
  <meta property="og:image" content="/poster.jpg" />
  <meta name="twitter:card" content="summary_large_image" />
  <!-- Structured data (fill in dynamic bits at runtime) -->
  <script id="jsonld" type="application/ld+json">{}</script>
</head>
<body class="bg-zinc-950 text-zinc-100">
  <!-- Config: set these to your values -->
  <script>
    window.SITE_CONFIG = {
      // REQUIRED: your IMDb title ID for Family Felinz Network (from your IMDb page URL)
      imdbId: "tt37540233", // Family Felinz Network on IMDb
      // REQUIRED: OMDb API key (free/patreon). Get one at http://www.omdbapi.com/apikey.aspx
      omdbApiKey: "YOUR_OMDB_API_KEY",
      // A direct stream URL (HLS .m3u8 or MP4). If using Vimeo/YouTube, leave this null and use the embed below.
      streamUrl: null, // e.g., "https://your-cdn.example.com/family-felinz/master.m3u8"
      // Optional poster/backdrop overrides if OMDb lacks images
      fallbackPoster: "/poster.jpg",
      fallbackBackdrop: "/backdrop.jpg",
      // Optional: external trailer embed (YouTube or Vimeo). Provide full embed URL.
      trailerEmbedUrl: "https://www.youtube.com/embed/vGl8yyJuVio", // Official trailer on YouTube
      // Optional: a transactional or promo link
      ctaUrl: null, // e.g., "https://buy.stripe.com/..."
      // Optional: Free/AVOD note
      availability: "Free to watch",
      // Optional: legal notice footer
      legalNotice: "IMDb data displayed via OMDb API. This site is not affiliated with IMDb."
    };
  </script>  <header class="sticky top-0 z-40 backdrop-blur bg-black/40 border-b border-white/5">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <div class="flex items-center gap-3">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-7 h-7" aria-hidden="true" fill="currentColor"><path d="M3 6.75A2.75 2.75 0 0 1 5.75 4h12.5A2.75 2.75 0 0 1 21 6.75v10.5A2.75 2.75 0 0 1 18.25 20H5.75A2.75 2.75 0 0 1 3 17.25V6.75Zm3.25-.25a.75.75 0 0 0-.75.75v9.5c0 .414.336.75.75.75h11.5a.75.75 0 0 0 .75-.75v-9.5a.75.75 0 0 0-.75-.75H6.25Z"/></svg>
        <span class="font-semibold tracking-tight">Family Felinz Network — Stream</span>
      </div>
      <a id="imdbLink" href="#" target="_blank" rel="noopener" class="text-yellow-400 hover:text-yellow-300 text-sm">View on IMDb</a>
    </div>
  </header>  <main id="app" class="min-h-screen">
    <!-- Hero -->
    <section id="hero" class="relative">
      <img id="backdrop" alt="Backdrop" class="absolute inset-0 w-full h-full object-cover backdrop opacity-60" />
      <div class="poster-mask absolute inset-0"></div>
      <div class="relative max-w-6xl mx-auto px-4 py-14 grid lg:grid-cols-[280px_1fr] gap-8 items-start">
        <img id="poster" alt="Poster" class="w-56 h-auto rounded-xl shadow-2xl ring-1 ring-white/10" />
        <div>
          <div class="flex items-center gap-3 mb-3">
            <span id="availability" class="px-2 py-1 rounded bg-emerald-500/20 text-emerald-200 text-xs uppercase tracking-wide"></span>
            <span id="ratingBadge" class="px-2 py-1 rounded bg-white/10 text-white text-xs hidden"></span>
          </div>
          <h1 id="title" class="text-3xl md:text-5xl font-extrabold leading-tight"></h1>
          <p id="meta" class="mt-2 text-zinc-300"></p>
          <p id="plot" class="mt-4 text-zinc-200 max-w-3xl"></p>
          <div class="mt-5 flex flex-wrap gap-3">
            <button id="watchBtn" class="px-5 py-3 rounded-2xl bg-white/95 text-black font-semibold hover:bg-white transition">▶ Watch now</button>
            <a id="ctaBtn" href="#" target="_blank" rel="noopener" class="hidden px-5 py-3 rounded-2xl bg-indigo-500 text-white font-semibold hover:bg-indigo-400">Get access</a>
            <a id="trailerBtn" href="#" target="_blank" rel="noopener" class="hidden px-5 py-3 rounded-2xl bg-white/10 text-white font-semibold hover:bg-white/20">Watch trailer</a>
          </div>
          <div id="ratings" class="mt-6 text-sm text-zinc-300"></div>
        </div>
      </div>
    </section><!-- Details -->
<section class="max-w-6xl mx-auto px-4 py-10 grid lg:grid-cols-2 gap-8">
  <div>
    <h2 class="text-xl font-semibold mb-3">Cast & Crew</h2>
    <dl class="grid grid-cols-[120px_1fr] gap-x-4 gap-y-2 text-sm">
      <dt class="text-zinc-400">Director</dt><dd id="director">—</dd>
      <dt class="text-zinc-400">Writers</dt><dd id="writers">—</dd>
      <dt class="text-zinc-400">Stars</dt><dd id="actors">—</dd>
      <dt class="text-zinc-400">Genres</dt><dd id="genres">—</dd>
      <dt class="text-zinc-400">Country</dt><dd id="country">—</dd>
      <dt class="text-zinc-400">Language</dt><dd id="language">—</dd>
    </dl>
  </div>
  <div>
    <h2 class="text-xl font-semibold mb-3">About</h2>
    <ul class="space-y-2 text-sm text-zinc-300">
      <li><span class="text-zinc-400">Rated:</span> <span id="rated">—</span></li>
      <li><span class="text-zinc-400">Runtime:</span> <span id="runtime">—</span></li>
      <li><span class="text-zinc-400">Release:</span> <span id="released">—</span></li>
      <li><span class="text-zinc-400">IMDb ID:</span> <code id="imdbIdCode" class="text-zinc-200"></code></li>
    </ul>
  </div>
</section>

  </main>  <!-- Watch Modal -->  <div id="watchModal" class="fixed inset-0 bg-black/80 hidden items-center justify-center p-4 z-50">
    <div class="bg-zinc-900 w-full max-w-5xl rounded-2xl overflow-hidden shadow-2xl ring-1 ring-white/10">
      <div class="flex items-center justify-between px-4 py-3 border-b border-white/10">
        <h3 class="font-semibold">Now Playing — <span id="modalTitle"></span></h3>
        <button id="closeModal" class="text-zinc-300 hover:text-white">✕</button>
      </div>
      <div class="relative bg-black">
        <!-- Native player (HLS via hls.js if needed) -->
        <video id="player" class="w-full aspect-video" controls playsinline></video>
        <!-- Fallback iframe (YouTube/Vimeo) -->
        <iframe id="embed" class="w-full aspect-video hidden" allow="autoplay; fullscreen; picture-in-picture"></iframe>
      </div>
      <div class="px-4 py-3 text-xs text-zinc-400 border-t border-white/10">
        <span id="legal"></span>
      </div>
    </div>
  </div>  <footer class="max-w-6xl mx-auto px-4 py-10 text-xs text-zinc-400">
    <p>© <span id="year"></span> Family Felinz Network. <span id="legalFooter"></span></p>
  </footer>  <script>
    const $ = (id) => document.getElementById(id);

    async function fetchOmdb(id, key) {
      const url = `https://www.omdbapi.com/?i=${encodeURIComponent(id)}&plot=full&r=json&apikey=${encodeURIComponent(key)}`;
      const res = await fetch(url);
      if (!res.ok) throw new Error("OMDb request failed");
      const data = await res.json();
      if (data.Response === 'False') throw new Error(data.Error || 'OMDb error');
      return data;
    }

    function setText(id, text) { const el = $(id); if (el) el.textContent = text || '—'; }
    function show(el, on=true){ el.classList[on?'remove':'add']('hidden'); }

    function setupStructuredData(omdb, streamUrl) {
      const jsonld = {
        '@context': 'https://schema.org',
        '@type': 'VideoObject',
        name: omdb.Title,
        description: omdb.Plot,
        thumbnailUrl: [omdb.Poster && omdb.Poster !== 'N/A' ? omdb.Poster : window.SITE_CONFIG.fallbackPoster].filter(Boolean),
        uploadDate: omdb.Released && omdb.Released !== 'N/A' ? new Date(omdb.Released).toISOString().split('T')[0] : undefined,
        duration: omdb.Runtime && omdb.Runtime !== 'N/A' ? `PT${parseInt(omdb.Runtime)}M` : undefined,
        aggregateRating: omdb.imdbRating && omdb.imdbVotes && omdb.imdbRating !== 'N/A' ? {
          '@type': 'AggregateRating',
          ratingValue: omdb.imdbRating,
          ratingCount: omdb.imdbVotes.replace(/,/g,'')
        } : undefined,
        sameAs: `https://www.imdb.com/title/${window.SITE_CONFIG.imdbId}/`,
        contentUrl: streamUrl || undefined
      };
      $('jsonld').textContent = JSON.stringify(jsonld, null, 2);
    }

    function initPlayer({ streamUrl, trailerEmbedUrl }) {
      const player = $('player');
      const iframe = $('embed');
      if (streamUrl) {
        iframe.src = '';
        show(iframe, false);
        show(player, true);
        // If HLS supported natively
        if (player.canPlayType('application/vnd.apple.mpegurl')) {
          player.src = streamUrl;
        } else if (window.Hls && window.Hls.isSupported()) {
          const hls = new Hls();
          hls.loadSource(streamUrl);
          hls.attachMedia(player);
        } else {
          // Fallback to MP4 attempt
          player.src = streamUrl;
        }
      } else if (trailerEmbedUrl) {
        show(player, false);
        show(iframe, true);
        iframe.src = trailerEmbedUrl;
      } else {
        show(player, true);
        player.outerHTML = '<div class="w-full aspect-video flex items-center justify-center text-zinc-400">No stream configured.</div>';
      }
    }

    async function main(){
      document.body.classList.add('ready');
      const cfg = window.SITE_CONFIG;
      const imdbUrl = `https://www.imdb.com/title/${cfg.imdbId}/`;
      $('imdbLink').href = imdbUrl;
      setText('availability', cfg.availability || 'Available');
      if (cfg.ctaUrl) { const cta = $('ctaBtn'); cta.href = cfg.ctaUrl; show(cta, true); }
      if (cfg.trailerEmbedUrl) { const t = $('trailerBtn'); t.href = cfg.trailerEmbedUrl; show(t, true); }
      setText('legal', cfg.legalNotice || '');
      $('legalFooter').textContent = cfg.legalNotice || '';
      $('year').textContent = new Date().getFullYear();
      setText('imdbIdCode', cfg.imdbId);

      try {
        const omdb = await fetchOmdb(cfg.imdbId, cfg.omdbApiKey);
        // Title/meta
        setText('title', `${omdb.Title || ''}${omdb.Year && omdb.Year !== 'N/A' ? ' ('+omdb.Year+')' : ''}`);
        setText('meta', [omdb.Rated, omdb.Runtime, omdb.Genre].filter(v => v && v !== 'N/A').join(' • '));
        setText('plot', omdb.Plot && omdb.Plot !== 'N/A' ? omdb.Plot : '');
        setText('director', omdb.Director);
        setText('writers', omdb.Writer);
        setText('actors', omdb.Actors);
        setText('genres', omdb.Genre);
        setText('country', omdb.Country);
        setText('language', omdb.Language);
        setText('rated', omdb.Rated);
        setText('runtime', omdb.Runtime);
        setText('released', omdb.Released);

        // Ratings
        const ratingsEl = $('ratings');
        const parts = [];
        if (omdb.imdbRating && omdb.imdbRating !== 'N/A') {
          $('ratingBadge').textContent = `IMDb ${omdb.imdbRating}/10`;
          show($('ratingBadge'), true);
          parts.push(`IMDb: ${omdb.imdbRating}/10 (${omdb.imdbVotes})`);
        }
        if (Array.isArray(omdb.Ratings)) {
          omdb.Ratings.forEach(r => parts.push(`${r.Source}: ${r.Value}`));
        }
        ratingsEl.textContent = parts.join(' · ');

        // Images
        const posterUrl = (omdb.Poster && omdb.Poster !== 'N/A') ? omdb.Poster : cfg.fallbackPoster;
        const backdropUrl = cfg.fallbackBackdrop || posterUrl;
        if (posterUrl) $('poster').src = posterUrl;
        if (backdropUrl) $('backdrop').src = backdropUrl;

        // Structured data
        setupStructuredData(omdb, cfg.streamUrl);

        // Watch button
        $('watchBtn').addEventListener('click', () => {
          $('modalTitle').textContent = omdb.Title || 'Now Playing';
          initPlayer({ streamUrl: cfg.streamUrl, trailerEmbedUrl: cfg.trailerEmbedUrl });
          show($('watchModal'), true);
        });
        $('closeModal').addEventListener('click', () => { show($('watchModal'), false); $('player').pause && $('player').pause(); });
      } catch (err) {
        console.error(err);
        setText('plot', 'Could not load IMDb data. Please verify your OMDb API key and IMDb ID in SITE_CONFIG.');
      }
    }

    main();
  </script>  <!-- Optional: basic privacy-friendly analytics (placeholder) -->  <!-- <script defer data-domain="yourdomain.com" src="https://plausible.io/js/script.js"></script> --></body>
</html>
